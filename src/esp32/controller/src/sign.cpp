#include "sign.hpp"

#define BUFFER_OFFSET 2

#define SIGN_DATA_FRAMES 16
#define SIGN_DATA_FRAME_LENGTH 16
#define MAX_DATA_VERTS 120
#define BUFFER_SIZE SIGN_DATA_FRAMES * SIGN_DATA_FRAME_LENGTH

uint8_t signDataBuffer[BUFFER_SIZE] = {
    0x01, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

/**
 * @brief drawSign converts screen buffer data to the sign buffer and then sends it to the sign
 *
 * First it converts the screen buffer data to the sign buffer.
 *
 * Because the bytes are switched around, we first loop over the last row of the screen buffer,
 * then the second to last row with an offset of 1.
 *
 * More info on https://github.com/olikraus/u8g2/wiki/u8g2reference#direct-access-buffer-api
 */

void drawSign() {
    Serial.println("drawSign: " + signText);

    uint8_t* signDataBufferPtr = signDataBuffer;

    uint8_t* screenBufferPtr;

    // Do the top row
    screenBufferPtr = u8g2.getBufferPtr();
    screenBufferPtr += 6 * u8g2.getBufferTileWidth() * 8;

    signDataBufferPtr = signDataBuffer;
    signDataBufferPtr += BUFFER_OFFSET;

    for (int i = 0; i < MAX_DATA_VERTS; i++) {
        *signDataBufferPtr = *screenBufferPtr;
        signDataBufferPtr += BUFFER_OFFSET;
        screenBufferPtr++;
    }

    // Do the bottom row
    screenBufferPtr = u8g2.getBufferPtr();
    screenBufferPtr += 7 * u8g2.getBufferTileWidth() * 8;

    signDataBufferPtr = signDataBuffer;
    signDataBufferPtr += BUFFER_OFFSET + 1;

    for (int i = 0; i < MAX_DATA_VERTS; i++) {
        *signDataBufferPtr = *screenBufferPtr;
        signDataBufferPtr += BUFFER_OFFSET;
        screenBufferPtr++;
    }

    // Send the data to the sign
    // uint8_t* signDataBufferPtr2 = signDataBuffer;

    signBus.sendPixelData(1, signDataBuffer, BUFFER_SIZE);
}

int discoverSigns() {
    return signBus.discoverSigns();
}

int initializeSigns() {
    return signBus.initializeSigns();
}